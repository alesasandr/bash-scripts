#!/bin/bash

if [[ "$#" -gt 0 ]]; then {
output_file="$2";
touch "$output_file";
echo "${PWD##*/}" >> "$output_file";
echo "========================================" >> "$output_file";
# если вызвано с параметрами ($# - их количество) то записываем в файл

ps -p $$ >> "$output_file";
echo "========================================" >> "$output_file";

eval echo ~$USER >> "$output_file";
echo "========================================" >> "$output_file";


os_name=$(grep PRETTY_NAME /etc/os-release);
os_version=$(grep VERSION /etc/os-release);



echo "Название операционной системы: $os_name" >> "$output_file"; 
echo "Версия операционной системы: $os_version" >> "$output_file";
echo "========================================" >> "$output_file";

cat /etc/shells >> "$output_file";
echo "========================================" >> "$output_file";

w >> "$output_file";
echo "========================================" >> "$output_file";

who | wc -l >> "$output_file";
echo "========================================" >> "$output_file";

lsblk >> "$output_file";
echo "========================================" >> "$output_file"; 

lscpu >> "$output_file";
echo "========================================" >> "$output_file";

free >> "$output_file";
echo "========================================" >> "$output_file";

df >> "$output_file";
echo "========================================" >> "$output_file";

dpkg --get-selections | grep -v deinstall >> "$output_file";
echo "========================================" >> "$output_file";

exit;
}; fi



key=''
while [[ $key = '' ]]  # пока введенная клавиша - ENTER (в bash '')
do
echo -e '\nМеню системной информации: \t'
echo -e '1. Текущий рабочий каталог \t'
echo -e '2. Текущий запущенный процесс \t'
echo -e '3. Домашний каталог \t'
echo -e '4. Название и версия операционной системы \t'
echo -e '5. Показать все доступные оболочки в вашей системе \t'
echo -e '6. Текущие пользователи, вошедшие в систему \t'
echo -e '7. Количество пользователей, вошедших в систему \t'
echo -e '8. Информация о жестких дисках \t'
echo -e '9. Информация о процессоре \t'
echo -e '10. Информация о памяти \t'
echo -e '11. Информация о файловой системе \t'
echo -e '12. Информация об установленных пакетах ПО \t'
echo -e '13. Выход \t'
echo -e '14. Ввести в файл \t'
echo -n 'Введите выбранный вариант: '
read option
echo -e '\t'

if [[ $option = '1' ]]; then {
result=${PWD##*/}
# PWD - имя текущего рабочего каталога. 
# ##*/ означает удаление символов до последнего / в строке включительно
result=${result:-/} # если переменная result пуста или не установлена, то она присваиваеv ей /.
echo -e "\n${PWD##*/}"
}

elif [[ $option = '2' ]]; then {
# ps - список процессов, запущенных в текущей командой оболочке
# -p -- выбрать процессы
# $$ - с текущим PID-идентификатором
ps -p $$

}

elif [[ $option = '3' ]]; then {
# eval интерпретирует и выполняет динамические или сложные команды, сохраненные в строках или переменных
# ~ - расширяется до USER если определено, иначе - до домашнего каталога
eval echo ~$USER

}

elif [[ $option = '4' ]]; then {
# Получаем название операционной системы
# cat - позволяет создавать, объединять, а также выводить содержимое файлов в командной строке или в другом файле
# grep - поиск в файле (в данном случае атрибута PRETTY_NAME)
# cut - срезаем часть текста
# -d -- устанавливаем свой разделитель (=) вместо TAB
# -f -- выбор на местах (-f2 означает выбор от второго символа)
# tr - команда позволяет заменять или удалять из стандартного ввожа
os_name=$(grep PRETTY_NAME /etc/os-release);
#Получаем версию операционной системы
os_version=$(grep VERSION /etc/os-release);

# Выводим название и версию операционной системы
echo "Название операционной системы: $os_name"
echo "Версия операционной системы: $os_version"

}

elif [[ $option = '5' ]]; then {
# Список доступных командных оболочек
cat /etc/shells

}
elif [[ $option = '6' ]]; then {
# С помощью w пользователи Linux получают информацию об учетных записях, которые были активны в системе
# с момента включения компьютера, а также о действиях, воспроизводимых с каждого аккаунта.
w

}   

elif [[ $option = '7' ]]; then {
# Команда who выводит информацию о текущих пользователях в системе
# с помощью wc -l выполняется подсчет строк, что дает количество вошедших пользователей
who | wc -l

}

elif [[ $option = '8' ]]; then {
# Информация о дисках
lsblk

}

elif [[ $option = '9' ]]; then {
# информация о процессоре
lscpu

}

elif [[ $option = '10' ]]; then {
# free - краткая информация о памяти
# cat /proc/meminfo - полная
free 

}

elif [[ $option = '11' ]]; then {
# информация о файловой системе
df

}

elif [[ $option = '12' ]]; then {
# Информация об установленных пакетах ПО
dpkg --get-selections | grep -v deinstall
}

elif [[ $option = '13' ]]; then {
exit
};

elif [[ $option = '14' ]]; then {
output_file="output.txt";
touch "$output_file";

echo "${PWD##*/}" >> "$output_file";
echo "========================================" >> "$output_file";
# если вызвано с параметрами ($# - их количество) то записываем в файл

ps -p $$ >> "$output_file";
echo "========================================" >> "$output_file";

eval echo ~$USER >> "$output_file";
echo "========================================" >> "$output_file";

echo "Название операционной системы: $os_name" >> "$output_file"; 
echo "Версия операционной системы: $os_version" >> "$output_file";
echo "========================================" >> "$output_file";

cat /etc/shells >> "$output_file";
echo "========================================" >> "$output_file";

w >> "$output_file";
echo "========================================" >> "$output_file";

who | wc -l >> "$output_file";
echo "========================================" >> "$output_file";

lsblk >> "$output_file";
echo "========================================" >> "$output_file"; 

lscpu >> "$output_file";
echo "========================================" >> "$output_file";

free >> "$output_file";
echo "========================================" >> "$output_file";

df >> "$output_file";
echo "========================================" >> "$output_file";

dpkg --get-selections | grep -v deinstall >> "$output_file";
echo "========================================" >> "$output_file";
exit;
};

else
echo 'Неверный ввод' 
exit
fi

echo -e 'Для продолжения нажмите Enter '
read -rsn1 key
echo -e '\n'

if [[ key -ne '' ]]; then exit; fi  # если не ENTER то выходим

done;


